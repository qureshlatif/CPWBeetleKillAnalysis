    model{
      
      # Need to supply:
        # Y, area.band, area.prop, breaks, dclass, nG, nInd, nPoint, gridID, nGrid
        # detection covariates: Time.b, DOY.b, ccov.b, shcov.b 
        # point-level abundance covariates: PctDead.b, YSO.b, Outbrk.b, TWIP.b
        # For point-level covariate imputation: PctDead.sd, PctDead.lower, TWIP.d, TWIP.sd,
        #    ccov.means, ccov.sd, shcov.means, shcov.sd, PctDead.b.missing, TWIP.b.missing, shcov.b.missing, ccov.b.missing
      
      # Prior on hazard rate parameters
      a0 ~ dnorm(0, 0.1)
      a.Time ~ dnorm(0, 0.1)
      a.Time2 ~ dnorm(0, 0.1)
      a.DOY ~ dnorm(0, 0.1)
      a.DOY2 ~ dnorm(0, 0.1)
      a.pdead ~ dnorm(0, 0.1)
      a.YSO ~ dnorm(0, 0.1)
      a.YSO2 ~ dnorm(0, 0.1)
      a.pdXYSO ~ dnorm(0, 0.1)
      b ~ dunif(0, 100)

      # Priors on lambda
      beta0.mean ~ dnorm(0, 0.1)
      beta0.sd ~ dunif(0, 10)
      beta0.tau <- pow(beta0.sd, -2)

      for(g in 1:nGrid) {
        beta0[g] ~ dnorm(beta0.mean, beta0.tau)
      }

      bl.pdead ~ dnorm(0, 0.1)
      bl.YSO ~ dnorm(0, 0.1)
      bl.YSO2 ~ dnorm(0, 0.1)
      bl.pdXYSO ~ dnorm(0, 0.1)
      bl.RCovAS ~ dnorm(0, 0.1)
      bl.RCovPine ~ dnorm(0, 0.1)

      # Sample cluster sizes #
      gam.r <- pow(mean.cl - 1, 2) / pow(sd.cl, 2)
      gam.lam <- (mean.cl - 1) / pow(sd.cl, 2)
      cl ~ dgamma(gam.r, gam.lam)
      cl.size <- cl + 1

      # Impute missing data
      for(j in 1:nPoint) {
        YSO.b.imp[j] ~ dunif(YSO.mins[gridID[j]], YSO.maxs[gridID[j]])
        yso[j] <- YSO.b[j]*(1 - YSO.missing[j]) + YSO.b.imp[j]*YSO.missing[j]
        PctDead.b.imp[j] ~ dnorm(PctDead.b[j], pow(PctDead.sd[j], -2))T(PctDead.lower,)
        pdead[j] <- PctDead.b[j]*(1-PctDead.b.missing[j]) + PctDead.b.imp[j]*PctDead.b.missing[j]
        RCovAS.b.imp[j] ~ dnorm(RCovAS.d[gridID[j]], pow(RCovAS.sd[gridID[j]], -2))T(RCovAS.lower,)
        RCovAS[j] <- RCovAS.b[j]*(1 - RCovAS.b.missing[j]) + RCovAS.b.imp[j]*RCovAS.b.missing[j]
        RCovPine.b.imp[j] ~ dnorm(RCovPine.d[gridID[j]], pow(RCovPine.sd[gridID[j]], -2))T(RCovPine.lower,)
        RCovPine[j] <- RCovPine.b[j]*(1 - RCovPine.b.missing[j]) + RCovPine.b.imp[j]*RCovPine.b.missing[j]
      }

      ### Point-level loop
      for(j in 1:nPoint) {
        ## Abundance model
        log(lambda[j]) <- beta0[gridID[j]] + # Add point-level abundance covariates here
          bl.pdead*pdead[j] + bl.YSO*yso[j] + bl.YSO2*pow(yso[j], 2) +
          bl.pdXYSO*pdead[j]*yso[j] + bl.RCovAS*RCovAS[j] + bl.RCovPine*RCovPine[j]
        N[j] ~ dpois(lambda[j])
        Y[j] ~ dbin(pcap[j], N[j]) # Observation model
        #D[j] ~ (N[j] * cl.size) / area.circle # If desired, but can also be done later in R.
        
        #_______ For GOF based on deviance ________#
        Y.new[j] ~ dbin(pcap[j], N[j]) # Simulate predicted data
        
        LLsim[j] <- logfact(N[j]) - logfact(Y.new[j]) + logfact(N[j] - Y.new[j]) + #log-likelihood for simulated data
          log(pcap[j])*Y.new[j] + N[j]*log(1 - pcap[j]) - Y.new[j]*log(1 - pcap[j])
        LL[j] <- logfact(N[j]) - logfact(Y[j]) + logfact(N[j] - Y[j]) + #log-likelihood for observed data
          log(pcap[j])*Y[j] + N[j]*log(1 - pcap[j]) - Y[j]*log(1 - pcap[j])
        #__________________________________________#
        
        ## Detection parameters
        log(a[j]) <- a0 + a.Time*Time.b[j] + a.Time2*pow(Time.b[j], 2) + a.DOY*DOY.b[j] + a.DOY2*pow(DOY.b[j], 2) + # Add detection covariates here.
          a.pdead*pdead[j] + a.YSO*yso[j] + a.YSO2*pow(yso[j], 2) + a.pdXYSO*pdead[j]*yso[j]
        for(k in 1:nG) {
          p[j, k] <- 1 - exp(-pow(((breaks[k] + breaks[k + 1]) / 2) / a[j], -b))
          pi[j, k] <- p[j, k] * area.prop[k]
          pic[j, k] <- pi[j, k] / pcap[j]
        }
        pcap[j] <- sum(pi[j, ])
      }
      
      ### Multi-nomial portion of detection model (Loop over detected individuals)
      for(i in 1:nInd) { # multi-nomial portion of detection model
        dclass[i, 3] ~ dcat(pic[dclass[i, 1], 1:nG])
      }

      ### Derived parameters
      #N.mean <- sum(N[1:nPoint]) / nPoint
      #p.mean <- sum(pcap[1:nPoint]) / nPoint

      #_______ Bayesian GOF based on deviance ________#
      #deviance
      dev_sim <- (-2)*sum(LLsim[])
      dev_data <- (-2)*sum(LL[])

      #test statistics should be ~0.5 if model fits
      test <- step(dev_data - dev_sim)
      #_______________________________________________#
    }
